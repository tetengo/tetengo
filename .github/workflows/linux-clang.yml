# GitHub Actions Workflow
# Build with Clang on Linux
# Copyright 2019-2021 kaoru  https://www.tetengo.org/

name: Linux - Clang

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    tags:     [ v* ]
  pull_request:
    branches: [ master ]

env:
  CACHE_REV:        0
  CONCURRENT_BUILD: 4
  DOXYGEN_VER:      1.9.2
  BOOST_VER:        1_78_0
  BOOST_VER_DOT:    1.78.0

jobs:
  doxygen_build:
    name:    Doxygen Build
    runs-on: ubuntu-20.04
    steps:
    - name: Install dependencies
      shell: bash
      run: |
        if [ ! -e .doxygen_build/doxygen-${{ env.DOXYGEN_VER }}/build/.build_finished ];
        then
          sudo apt-get -y update
          sudo apt-get -y install \
            bison \
            cmake \
            flex
         fi
    
    - name: Cache Doxygen build
      uses: actions/cache@v2
      with:
        path: .doxygen_build
        key: ${{ env.CACHE_REV }}-Linux-Clang-Doxygen-${{ env.DOXYGEN_VER }}
    
    - name: Build Doxygen
      shell: bash
      run: |
        if [ ! -e .doxygen_build/doxygen-${{ env.DOXYGEN_VER }}/build/.build_finished ];
        then
          mkdir -p .doxygen_build
          cd .doxygen_build
          wget http://doxygen.nl/files/doxygen-${{ env.DOXYGEN_VER }}.src.tar.gz
          tar -xf doxygen-${{ env.DOXYGEN_VER }}.src.tar.gz
          mkdir -p doxygen-${{ env.DOXYGEN_VER }}/build
          cd doxygen-${{ env.DOXYGEN_VER }}/build
          cmake -G "Unix Makefiles" ..
          make -j ${{ env.CONCURRENT_BUILD }}
          touch .build_finished
        fi
  
  boost_build:
    name:    Boost Build
    runs-on: ubuntu-20.04
    steps:
    - name: Cache Boost build
      uses: actions/cache@v2
      with:
        path: .boost_build
        key: ${{ env.CACHE_REV }}-Linux-Clang-Boost-${{ env.BOOST_VER }}
    
    - name: Build Boost
      shell: bash
      run: |
        if [ ! -e .boost_build/boost_${{ env.BOOST_VER }}/.build_finished ];
        then
          mkdir -p .boost_build
          cd .boost_build
          curl -L -o boost_${{ env.BOOST_VER }}.tar.bz2 https://boostorg.jfrog.io/artifactory/main/release/${{ env.BOOST_VER_DOT }}/source/boost_${{ env.BOOST_VER }}.tar.bz2
          tar -xf boost_${{ env.BOOST_VER }}.tar.bz2
          cd boost_${{ env.BOOST_VER }}
          ./bootstrap.sh --with-toolset=clang
          (./b2 -j ${{ env.CONCURRENT_BUILD }} toolset=clang variant=release link=static cxxflags="-std=gnu++11" || :)
          touch .build_finished
        fi
  
  doxygen:
    name:    Doxygen
    runs-on: ubuntu-20.04
    needs:   doxygen_build
    steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get -y install \
          autoconf-archive \
          clang-9 \
          dos2unix \
          iwyu \
          graphviz
    
    - name: Restore Doxygen build
      uses: actions/cache@v2
      with:
        path: .doxygen_build
        key: ${{ env.CACHE_REV }}-Linux-Clang-Doxygen-${{ env.DOXYGEN_VER }}
    
    - name: Install Doxygen
      shell: bash
      run: |
        cd .doxygen_build/doxygen-${{ env.DOXYGEN_VER }}/build
        sudo make -j ${{ env.CONCURRENT_BUILD }} install
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Configure
      shell: bash
      run: |
        export DISTCHECK_CONFIGURE_FLAGS=" \
          CC=clang-11 \
          CXX=clang++-11 \
        "
        ./bootstrap.sh
        mkdir -p .doxygen
        cd .doxygen
        ../configure $DISTCHECK_CONFIGURE_FLAGS
    
    - name: Cache documents
      uses: actions/cache@v2
      with:
        path: .doxygen
        key: ${{ env.CACHE_REV }}-${{ github.github.run_number }}-Linux-Clang-documents
    
    - name: Make documents
      shell: bash
      run: |
        cd .doxygen
        make doc
  
  lint:
    name:    Lint
    runs-on: ubuntu-20.04
    needs:   boost_build
    steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get -y install \
          autoconf-archive \
          clang-9 \
          dos2unix \
          iwyu \
          graphviz
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Restore Boost build
      uses: actions/cache@v2
      with:
        path: .boost_build
        key: ${{ env.CACHE_REV }}-Linux-Clang-Boost-${{ env.BOOST_VER }}
    
    - name: Install Boost
      shell: bash
      run: |
        cd .boost_build/boost_${{ env.BOOST_VER }}
        (sudo ./b2 -j ${{ env.CONCURRENT_BUILD }} toolset=clang variant=release link=static install --prefix=/usr/local || :)
    
    - name: Configure
      shell: bash
      run: |
        export DISTCHECK_CONFIGURE_FLAGS=" \
          CC=clang-11 \
          CXX=clang++-11 \
        "
        ./bootstrap.sh
        mkdir -p .lint
        cd .lint
        ../configure $DISTCHECK_CONFIGURE_FLAGS
    
    - name: Lint
      shell: bash
      run: |
        cd .lint
        make -j ${{ env.CONCURRENT_BUILD }} iwyu
  
  build:
    name:    Build
    runs-on: ubuntu-20.04
    needs:   boost_build
    steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get -y install \
          autoconf-archive \
          clang-9 \
          dos2unix \
          iwyu \
          graphviz
    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    
    - name: Restore Boost build
      uses: actions/cache@v2
      with:
        path: .boost_build
        key: ${{ env.CACHE_REV }}-Linux-Clang-Boost-${{ env.BOOST_VER }}
    
    - name: Install Boost
      shell: bash
      run: |
        cd .boost_build/boost_${{ env.BOOST_VER }}
        (sudo ./b2 -j ${{ env.CONCURRENT_BUILD }} toolset=clang variant=release link=static install --prefix=/usr/local || :)
    
    - name: Configure
      shell: bash
      run: |
        export DISTCHECK_CONFIGURE_FLAGS=" \
          CC=clang-11 \
          CXX=clang++-11 \
        "
        ./bootstrap.sh
        mkdir -p .build
        cd .build
        ../configure $DISTCHECK_CONFIGURE_FLAGS
    
    - name: Cache archives
      uses: actions/cache@v2
      with:
        path: .build
        key: ${{ env.CACHE_REV }}-${{ github.github.run_number }}-Linux-Clang-archives
    
    - name: Build and make archives
      shell: bash
      run: |
        export DISTCHECK_CONFIGURE_FLAGS=" \
          CC=clang-11 \
          CXX=clang++-11 \
        "
        export BOOST_TEST_LOG_LEVEL=warning
        cd .build
        make -j ${{ env.CONCURRENT_BUILD }} distcheck
        make -j ${{ env.CONCURRENT_BUILD }} dist-bzip2
        make -j ${{ env.CONCURRENT_BUILD }} dist-zip
    
  artifact:
    name:    Build
    runs-on: ubuntu-20.04
    needs:   [ doxygen, build ]
    steps:
    - name: Restore documents
      uses: actions/cache@v2
      with:
        path: .doxygen
        key: ${{ env.CACHE_REV }}-${{ github.github.run_number }}-Linux-Clang-documents
    
    - name: Restore archives
      uses: actions/cache@v2
      with:
        path: .build
        key: ${{ env.CACHE_REV }}-${{ github.github.run_number }}-Linux-Clang-archives
    
    - name: Move artifacts
      shell: bash
      run: |
        mkdir .artifacts
        mv .doxygen/doc .artifacts
        mv .build/tetengo-* .artifacts
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: artifacts-linux
        path: .artifacts
